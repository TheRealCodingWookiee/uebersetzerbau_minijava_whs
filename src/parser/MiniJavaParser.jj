options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = true;
}

/******************************************************************************/
/* PARSER CODE                                                                */
/******************************************************************************/
PARSER_BEGIN(MiniJavaParser)

  package parser;

  import java.io.*;

  public class MiniJavaParser {

    public static void main(String[] args) {
      try {
         String sourceFilename = args[0];
         FileInputStream in = new FileInputStream(sourceFilename );

         /* parsing of input file */
         new MiniJavaParser(in).Program();
         in.close();
         
         System.out.println("Syntactical analysis successful");   
      }

      catch (ParseException e) {
         System.out.println("Parser Error : \n"+ e.toString());
      } catch (IOException e) {
         System.out.println("File Error : \n"+ e.toString());      
      }
    }
  } 
PARSER_END(MiniJavaParser)


/******************************************************************************/
/* LEXICAL SPECIFICATION                                                      */
/******************************************************************************/

// Definieren Sie hier allezu ignorierenden Tokens.
SKIP : {
        " "
      | "\t"
      | "\n"
      | "\r"
      | "\f"
}

TOKEN : /*KOMMENTARE*/
{
        <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
      | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
      | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">

}

// Definieren Sie hier die Tokens der Sprache Minijava.
TOKEN : /*SCHLUESSELWOERTER*/
{
        < LPAREN: "(">
      | < RPAREN: ")">
      | < LSQPAREN: "[">
      | < RSQPAREN: "]">
      | < LBRACE: "{" >
      | < RBRACE: "}" >
      | < SEMICOLON: ";" >
      | < DOT: "." >
      | < ASSIGN: "=" >
      | < LESS_THEN: "<" >
      | < GREATER_THEN: ">">
      | < PLUS: "+" >
      | < MINUS: "-" >
      | < AND : "&&" >
      | < NOT : "!" >
      | < BOOLEAN: "boolean" >
      | < CLASS: "class" >
      | < INTERFACE: "interface" >
      | < ELSE: "else" >
      | < EXTENDS: "extends" >
      | < FALSE: "false" >
      | < IF: "if" >
      | < WHILE: "while" >
      | < INTEGER: "int" >
      | < LENGTH: "length" >
      | < MAIN: "main" >
      | < NEW: "new" >
      | < PUBLIC: "public" >
      | < RETURN: "return" >
      | < STATIC: "static" >
      | < STRING: "String" >
      | < THIS: "this" >
      | < TRUE: "true" >
      | < PRINT: "System.out.println" >
      | < VOID: "void" >
      | < #LETTER: (["a"-"z"] | ["A"-"Z"])+>
      | < #DIGIT: ["0"-"9"]>
      | < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
      | < INTEGER_LITERAL: ( ["1"-"9"] (<DIGIT>)* | "0" ) >
}



/******************************************************************************/
/* SYNTACTICAL SPECIFICATION                                                  */
/******************************************************************************/

/*----------------------------------------------------------------------------
 * Im Folgenden finden Sie eine simple Beispielgrammatik, die Sie anpassen 
 * koennen, um Ihre lexikalische Spezifikation zu testen.
 *----------------------------------------------------------------------------*/

/* Definiert ein Program als eine beliebige Folge von MiniJava-Tokens */
void Programm() :
{}
{
  MainClass()
  ( TypeDeclarationUnordered() )*
  <EOF>
}

void MainClass() :
{}
{
    <CLASS> Identifier() <RBRACE>
    <PUBLIC> <STATIC> <VOID> <MAIN> <LBRACE> <STRING> <LSQPAREN> <RSQPAREN> Identifier() <RBRACE>
    <LBRACE> PrintStatement() <RBRACE>
  <RBRACE>
}

void TypeDeclarationUnordered() :
{}
{
  LOOKAHEAD(3)
  ClassDeclaration()
|
  ClassExtendsDeclaration()
}

void ClassDeclaration() :
{}
{
  <CLASS> Identifier() <LBRACE> ( Comment() )*
                           ( VarDeclarationUnordered() )*
                           ( MethodDeclarationUnordered() )*
                       <RBRACE>
}

void ClassExtendsDeclaration() :
{}
{
  "class" Identifier() "extends" Identifier()
                       "{" ( Comment() )*
                           ( VarDeclarationUnordered() )*
                           ( MethodDeclarationUnordered() )*
                       "}"
}

void VarDeclarationUnordered() :
{}
{
  Type() Identifier() <SEMICOLON>
}

void MethodDeclarationUnordered() :
{}
{
  <PUBLIC> Type() Identifier()
  <LPAREN> ( FormalParameterList() )? <RPAREN>
  <LBRACE> ( Comment() )*
      ( LOOKAHEAD(2) VarDeclarationUnordered() )*
      ( Statement() )* <RETURN> Expression() <SEMICOLON> <RBRACE>
}

void FormalParameterList() :
{}
{
  FormalParameter() ( FormalParameterRest() )*
}

void FormalParameter() :
{}
{
  Type() Identifier()
}

void FormalParameterRest() :
{}
{
  "," FormalParameter()
}

void Type() :
{}
{
  LOOKAHEAD(3)
  ArrayType()
|
  BooleanType()
|
  IntegerType()
|
  Identifier()
}

void ArrayType() :
{}
{
  <INTEGER> <LSQPAREN> <RSQPAREN>
}

void BooleanType() :
{}
{
  <BOOLEAN>
}

void IntegerType() :
{}
{
  <INTEGER>
}

void Statement() :
{}
{
    Block()
  |
    LOOKAHEAD(2)
    AssignmentStatement()
  |
    LOOKAHEAD(2)
    ArrayAssignmentStatement()
  |
    IfStatement()
  |
    WhileStatement()
  |
    PrintStatement()
}

void Block() :
{}
{
  <LBRACE> ( Statement() )* <RBRACE>
}

void AssignmentStatement() :
{}
{
  Identifier() <ASSIGN> Expression() <SEMICOLON>
}

void ArrayAssignmentStatement() :
{}
{
  Identifier() <LSQPAREN> Expression() <RSQPAREN> <ASSIGN> Expression() <SEMICOLON>
}

void IfStatement() :
{}
{
  <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement()
}

void WhileStatement() :
{}
{
  <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void PrintStatement() :
{}
{
  <PRINT> <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void Expression() :
{}
{
  LOOKAHEAD( PrimaryExpression() <AND> )
  AndExpression()
|
  LOOKAHEAD( PrimaryExpression() "<" )
  CompareExpression()
|
  LOOKAHEAD( PrimaryExpression() "+" )
  PlusExpression()
|
  LOOKAHEAD( PrimaryExpression() "-" )
  MinusExpression()
|
  LOOKAHEAD( PrimaryExpression() "*" )
  TimesExpression()
|
  LOOKAHEAD( PrimaryExpression() "[" )
  ArrayLookup()
|
  LOOKAHEAD( PrimaryExpression() "." "length" )
  ArrayLength()
|
  LOOKAHEAD( PrimaryExpression() "." Identifier() "(" )
  MessageSend()
|
  PrimaryExpression()
}

void AndExpression() :
{}
{
  PrimaryExpression() "&&" PrimaryExpression()
}

void CompareExpression() :
{}
{
  PrimaryExpression() "<" PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() "+" PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() "-" PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() "*" PrimaryExpression()
}

void ArrayLookup() :
{}
{
  PrimaryExpression() "[" PrimaryExpression() "]"
}

void ArrayLength() :
{}
{
  PrimaryExpression() "." "length"
}

void MessageSend() :
{}
{
  PrimaryExpression() "." Identifier()
  "(" ( ExpressionList() )? ")"
}

void ExpressionList() :
{}
{
  Expression() ( ExpressionRest() )*
}

void ExpressionRest() :
{}
{
  "," Expression()
}

void PrimaryExpression() :
{}
{
  IntegerLiteral()
|
  TrueLiteral()
|
  FalseLiteral()
|
  Identifier()
|
  ThisExpression()
|
  LOOKAHEAD(3)
  ArrayAllocationExpression()
|
  AllocationExpression()
|
  NotExpression()
|
  BracketExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}


void TrueLiteral() :
{}
{
  <TRUE>
}

void FalseLiteral() :
{}
{
  <FALSE>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void ThisExpression() :
{}
{
  <THIS>
}

void ArrayAllocationExpression() :
{}
{
  <NEW> <INTEGER> <LSQPAREN> Expression() <RSQPAREN>
}

void AllocationExpression() :
{}
{
  <NEW> Identifier() <LBRACE> <LBRACE>
}

void NotExpression() :
{}
{
  "!" Expression()
}

void BracketExpression() :
{}
{
  <RBRACE> Expression() <LBRACE>
}

void Comment() :
{}
{
  <SINGLE_LINE_COMMENT>
| <FORMAL_COMMENT>
| <MULTI_LINE_COMMENT>
}