options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = true;
}

/******************************************************************************/
/* PARSER CODE                                                                */
/******************************************************************************/
PARSER_BEGIN(MiniJavaParser)

  package parser;

  import java.io.*;

  public class MiniJavaParser {

    public static void main(String[] args) {
      try {
         String sourceFilename = args[0];
         FileInputStream in = new FileInputStream(sourceFilename );

         /* parsing of input file */
         new MiniJavaParser(in).Program();
         in.close();
         
         System.out.println("Syntactical analysis successful");   
      }

      catch (ParseException e) {
         System.out.println("Parser Error : \n"+ e.toString());
      } catch (IOException e) {
         System.out.println("File Error : \n"+ e.toString());      
      }
    }
  } 
PARSER_END(MiniJavaParser)


/******************************************************************************/
/* LEXICAL SPECIFICATION                                                      */
/******************************************************************************/

// Definieren Sie hier allezu ignorierenden Tokens.
SKIP : {
        " "
      | "\t"
      | "\n"
      | "\r"
      | "\f"
}

TOKEN : /*KOMMENTARE*/
{
        <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
      | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
      | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">

}

// Definieren Sie hier die Tokens der Sprache Minijava.
TOKEN : /*SCHLUESSELWOERTER*/
{
        <LPAREN: "(">
      | <RPAREN: ")">
      | <LSQPAREN: "[">
      | <RSQPAREN: "]">
      | < LBRACE: "{" >
      | < RBRACE: "}" >
      | < SEMICOLON: ";" >
      | < DOT: "." >
      | < ASSIGN: "=" >
      | < LT: "<" >
      | < PLUS: "+" >
      | < MINUS: "-" >
      | < AND : "&&" >
      | < NOT : "!" >
      | < BOOLEAN: "boolean" >
      | < CLASS: "class" >
      | < INTERFACE: "interface" >
      | < ELSE: "else" >
      | < EXTENDS: "extends" >
      | < FALSE: "false" >
      | < IF: "if" >
      | < WHILE: "while" >
      | < INTEGER: "int" >
      | < LENGTH: "length" >
      | < MAIN: "main" >
      | < NEW: "new" >
      | < PUBLIC: "public" >
      | < RETURN: "return" >
      | < STATIC: "static" >
      | < STRING: "String" >
      | < THIS: "this" >
      | < TRUE: "true" >
      | < PRINT: "System.out.println" >
      | < VOID: "void" >
}

TOKEN : /*LITERALS*/
{
        < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /*IDENTIFIERS*/
{
        < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
      |
        < #LETTER:
        [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
        ]
        >
      |
          < #DIGIT:
              [
               "\u0030"-"\u0039",
               "\u0660"-"\u0669",
               "\u06f0"-"\u06f9",
               "\u0966"-"\u096f",
               "\u09e6"-"\u09ef",
               "\u0a66"-"\u0a6f",
               "\u0ae6"-"\u0aef",
               "\u0b66"-"\u0b6f",
               "\u0be7"-"\u0bef",
               "\u0c66"-"\u0c6f",
               "\u0ce6"-"\u0cef",
               "\u0d66"-"\u0d6f",
               "\u0e50"-"\u0e59",
               "\u0ed0"-"\u0ed9",
               "\u1040"-"\u1049"
              ]
          >
}

/******************************************************************************/
/* SYNTACTICAL SPECIFICATION                                                  */
/******************************************************************************/

/*----------------------------------------------------------------------------
 * Im Folgenden finden Sie eine simple Beispielgrammatik, die Sie anpassen 
 * koennen, um Ihre lexikalische Spezifikation zu testen.
 *----------------------------------------------------------------------------*/

/* Definiert ein Program als eine beliebige Folge von MiniJava-Tokens */
void Program() :
{}
{
    ( Token() )* <EOF>
}

/* Definiert MiniJava-Token als Vereinigung aller oben definierten Tokens */
void Token():
{}
{
    // Geben Sie hier alle in der lexikalischen Spezifikation definierten Tokens 
    // - getrennt durch "|" - ein. Durch die Option "DEBUG_PARSER = true;" (s.o.)
    // zeigt der Parser alle eingelesenen Tokens an.
    //
    (
        <VOID>  // Diese Zeile entfernen!
    )
}
